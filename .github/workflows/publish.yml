name: publish

on:
  push:
    branches: ['main']
    tags:
      - 'v*.*.*'

concurrency: ${{ github.ref }}

jobs:
  create-draft-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      RELEASE_ID: ${{ steps.create-release.outputs.result }}
    steps:
      - run: "echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV"
      - uses: actions/github-script@v7
        id: create-release
        if: startsWith(github.ref, 'refs/tags/')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: true,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });

              return response.data.id;
            } catch (error) {
              core.setFailed(error.message);
            }

  build-binaries:
    strategy:
      matrix:
        include:
#          - runner: macos-latest
#            os: darwin
#            arch: arm64
#          - runner: ubuntu-latest
#            os: freebsd
#            arch: amd64
#          - runner: ubuntu-latest
#            os: freebsd
#            arch: arm64
#          - runner: ubuntu-latest
#            os: linux
#            arch: amd64
          - runner: ubuntu-latest
            os: linux
            arch: arm64
          - runner: windows-latest
            os: windows
            arch: amd64
#          - runner: windows-latest
#            os: windows
#            arch: arm64
    runs-on: ${{ matrix.runner }}
    needs: [create-draft-release]
    permissions:
      actions: write
      attestations: write
      checks: write
      contents: write
      id-token: write
      packages: write
      statuses: write
    env:
      APPLICATION_NAME: 'sign-test'
    steps:
      - run: "echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV"
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
      - name: Build binary
        if: ${{ matrix.os != 'windows' }}
        run: GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} make build
      - name: Build binary (Windows)
        if: ${{ matrix.os == 'windows' }}
        shell: pwsh
        run: |
          $env:GOOS="${{ matrix.os }}"
          $env:GOARCH="${{ matrix.arch }}"
          make build

      # Sign Windows build

      - name: Setup WiX Toolset
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows' }}
        run: |
          Invoke-WebRequest -Uri https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311.exe -OutFile wix311.exe
          Start-Process -FilePath .\wix311.exe -ArgumentList "/install","/quiet" -NoNewWindow -Wait
          echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Set up Java
        uses: actions/setup-java@v4
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows' }}
        with:
          java-version: 17
          distribution: 'temurin'
      - id: 'auth'
        name: Authenticate with Google Cloud
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows' }}
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.CERTIFICATE_SA_CREDENTIALS }}'
      - name: Set up Cloud SDK
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows' }}
        uses: 'google-github-actions/setup-gcloud@v2'
      - name: Sign windows binary
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows' }}
        shell: pwsh
        run: |
          Write-Host "Downloading jsign.jar"
          Invoke-WebRequest -Uri "https://github.com/ebourg/jsign/releases/download/6.0/jsign-6.0.jar" -OutFile "jsign.jar"

          Write-Host "Verifying jsign.jar checksum"
          $expectedHash = "05ca18d4ab7b8c2183289b5378d32860f0ea0f3bdab1f1b8cae5894fb225fa8a"
          $actualHash = (Get-FileHash -Path "jsign.jar" -Algorithm SHA256).Hash.ToLower()

          if ($actualHash -ne $expectedHash) {
            Write-Error "Hash verification failed for jsign.jar"
            Write-Error "Expected: $expectedHash"
            Write-Error "Actual: $actualHash"
            exit 1
          }

          [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("${{ secrets.CERTIFICATE_CHAIN }}")) | Out-File -FilePath "codesign-chain.pem" -Encoding utf8

          $filename = "${{ env.APPLICATION_NAME }}.exe"
          $ACCESS_TOKEN = & gcloud auth print-access-token
          Write-Host "::add-mask::$ACCESS_TOKEN"

          java -jar jsign.jar `
            --storetype ${{ secrets.CERTIFICATE_STORE_TYPE }} `
            --storepass "$ACCESS_TOKEN" `
            --keystore ${{ secrets.CERTIFICATE_KEYSTORE }} `
            --alias ${{ secrets.CERTIFICATE_KEY_NAME }} `
            --certfile "codesign-chain.pem" `
            --tsmode RFC3161 `
            --tsaurl "http://timestamp.globalsign.com/tsa/r6advanced1" `
            $filename

          $ACCESS_TOKEN = $null

          Write-Host "Signed Windows binary: $filename"
          Write-Host "Cleaning up certificate chain"
          Remove-Item -Path "codesign-chain.pem" -Force
      - name: Create Windows MSI installer
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows' }}
        run: |
          $version = "${{ env.RELEASE_TAG }}".TrimStart('v')
          
          Copy-Item LICENSE -Destination License.txt

          $licenseText = Get-Content -Raw LICENSE
          $rtfHeader = '{\rtf1\ansi\deff0{\fonttbl{\f0\fnil\fcharset0 Arial;}}\viewkind4\uc1\pard\lang1033\f0\fs20 '
          $rtfFooter = '\par}'
          $rtfContent = $licenseText -replace "`r`n", '\par ' -replace "`n", '\par '
          $rtfContent = $rtfHeader + $rtfContent + $rtfFooter
          $rtfContent | Out-File -FilePath License.rtf -Encoding ascii
          
          $namespace = [Guid]::new("B1C0DE00-1AB5-45F3-B11C-1AB550F7ACE5")
          
          $upgradeCodeBytes = [System.Text.Encoding]::UTF8.GetBytes("BlinkLabs-UpgradeCode-${{ env.APPLICATION_NAME }}")
          $upgradeCodeHash = [System.Security.Cryptography.SHA1]::Create().ComputeHash($upgradeCodeBytes)
          $upgradeCodeHash[6] = ($upgradeCodeHash[6] -band 0x0F) -bor 0x50 # Version 5
          $upgradeCodeHash[8] = ($upgradeCodeHash[8] -band 0x3F) -bor 0x80 # Variant 1
          $upgradeCode = [Guid]::new($upgradeCodeHash[0..15])
          
          $wxsContent = @"
          <?xml version="1.0" encoding="UTF-8"?>
          <Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
               xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">
            
            <?define UpgradeCode = "$upgradeCode" ?>
            
            <Product Id="*" 
                     Name="${{ env.APPLICATION_NAME }}" 
                     Language="1033" 
                     Version="$version" 
                     Manufacturer="Blink Labs Software" 
                     UpgradeCode="`$(var.UpgradeCode)">
              
              <Package InstallerVersion="200" 
                       Compressed="yes" 
                       InstallScope="perMachine"
                       Description="Installer for ${{ env.APPLICATION_NAME }}"
                       Comments="(c) 2025 Blink Labs Software" />
              
              <MajorUpgrade DowngradeErrorMessage="A newer version of [ProductName] is already installed." 
                            Schedule="afterInstallInitialize"
                            AllowSameVersionUpgrades="yes" />
              
              <MediaTemplate EmbedCab="yes" />
              
              <UIRef Id="WixUI_InstallDir" />
              <Property Id="WIXUI_INSTALLDIR" Value="INSTALLFOLDER" />
              <WixVariable Id="WixUILicenseRtf" Value="License.rtf" />
              
              <Property Id="ARPURLINFOABOUT" Value="https://blinklabs.io" />
              <Property Id="ARPNOMODIFY" Value="1" />
              
              <Feature Id="ProductFeature" Title="${{ env.APPLICATION_NAME }}" Level="1">
                <ComponentGroupRef Id="ProductComponents" />
                <ComponentRef Id="PathEnvironmentVariable" />
              </Feature>
              
              <Directory Id="TARGETDIR" Name="SourceDir">
                <Directory Id="ProgramFilesFolder">
                  <Directory Id="INSTALLFOLDER" Name="${{ env.APPLICATION_NAME }}" />
                </Directory>
              </Directory>
              
              <ComponentGroup Id="ProductComponents" Directory="INSTALLFOLDER">
                <Component Id="MainExecutable" Guid="*">
                  <File Id="ExecutableFile" 
                        Source="${{ env.APPLICATION_NAME }}.exe" 
                        KeyPath="yes" />
                </Component>
                
                <Component Id="LicenseFile" Guid="*">
                  <File Id="License" 
                        Source="License.txt" 
                        KeyPath="yes" />
                </Component>
              </ComponentGroup>
              
              <DirectoryRef Id="TARGETDIR">
                <Component Id="PathEnvironmentVariable" Guid="*">
                  <Environment Id="PATH" 
                              Name="PATH" 
                              Value="[INSTALLFOLDER]" 
                              Permanent="no" 
                              Part="last" 
                              Action="set" 
                              System="yes" />
                  
                  <RegistryValue Root="HKLM" 
                                 Key="Software\BlinkLabs\${{ env.APPLICATION_NAME }}" 
                                 Name="InstallPath" 
                                 Type="string" 
                                 Value="[INSTALLFOLDER]" 
                                 KeyPath="yes" />
                </Component>
              </DirectoryRef>
              
            </Product>
          </Wix>
          "@
          
          $wxsContent | Out-File -FilePath Product.wxs -Encoding utf8
          
          candle -ext WixUIExtension Product.wxs -o Product.wixobj
          
          light -ext WixUIExtension Product.wixobj -o "${{ env.APPLICATION_NAME }}-${{ env.RELEASE_TAG }}-${{ matrix.os }}-${{ matrix.arch }}.msi"
          
          if ($env:CERTIFICATE_SA_CREDENTIALS) {
            $AccessToken = gcloud auth print-access-token
            java -jar jsign.jar `
              --storetype ${{ secrets.CERTIFICATE_STORE_TYPE }} `
              --storepass "$AccessToken" `
              --keystore ${{ secrets.CERTIFICATE_KEYSTORE }} `
              --alias ${{ secrets.CERTIFICATE_KEY_NAME }} `
              --certfile codesign-chain.pem `
              --tsmode RFC3161 `
              --tsaurl http://timestamp.globalsign.com/tsa/r6advanced1 `
              "${{ env.APPLICATION_NAME }}-${{ env.RELEASE_TAG }}-${{ matrix.os }}-${{ matrix.arch }}.msi"
          }

      # Sign Linux build

      - name: Sign linux binary
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'linux' }}
        run: |
          echo "Decoding and importing GPG Release Signing Key..."
          echo "${{ secrets.GPG_RELEASE_SIGNING_PRIVATE_KEY }}" | base64 --decode | gpg --batch --import
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --reload gpg-agent
          gpg --pinentry-mode loopback --passphrase "${{ secrets.GPG_RELEASE_SIGNING_KEY_PASSPHRASE }}" \
              --detach-sign --armor \
              -o ${{ env.APPLICATION_NAME }}-${{ env.RELEASE_TAG }}-${{ matrix.os }}-${{ matrix.arch }}.sig ${{ env.APPLICATION_NAME }}
          gpg --verify ${{ env.APPLICATION_NAME }}-${{ env.RELEASE_TAG }}-${{ matrix.os }}-${{ matrix.arch }}.sig ${{ env.APPLICATION_NAME }}
          echo -n "${{ secrets.GPG_RELEASE_SIGNING_PUBLIC_KEY }}" | base64 --decode > blinklabs-io-release-signing-key.asc

      # Sign freebsd build

      - name: Sign freebsd binary
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'freebsd' }}
        run: |
          echo "Decoding and importing GPG Release Signing Key..."
          echo "${{ secrets.GPG_RELEASE_SIGNING_PRIVATE_KEY }}" | base64 --decode | gpg --batch --import
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --reload gpg-agent
          gpg --pinentry-mode loopback --passphrase "${{ secrets.GPG_RELEASE_SIGNING_KEY_PASSPHRASE }}" \
              --detach-sign --armor \
              -o ${{ env.APPLICATION_NAME }}-${{ env.RELEASE_TAG }}-${{ matrix.os }}-${{ matrix.arch }}.sig ${{ env.APPLICATION_NAME }}
          gpg --verify ${{ env.APPLICATION_NAME }}-${{ env.RELEASE_TAG }}-${{ matrix.os }}-${{ matrix.arch }}.sig ${{ env.APPLICATION_NAME }}
          echo -n "${{ secrets.GPG_RELEASE_SIGNING_PUBLIC_KEY }}" | base64 --decode > blinklabs-io-release-signing-key.asc

      # Sign macOS build and create installer package with DMG

      - name: Create .app package, sign, and create installer DMG for macOS
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'darwin' }}
        run: |
          echo "Decoding and importing Apple certificates..."
          echo -n "${{ secrets.APPLE_CERTIFICATE }}" | base64 --decode -o apple_certificate.p12
          echo -n "${{ secrets.APPLE_INSTALLER_CERTIFICATE }}" | base64 --decode -o apple_installer_certificate.p12
          security create-keychain -p "${{ secrets.APPLE_KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security unlock-keychain -p "${{ secrets.APPLE_KEYCHAIN_PASSWORD }}" build.keychain
          security import apple_certificate.p12 -k build.keychain -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security import apple_installer_certificate.p12 -k build.keychain -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/productsign
          security set-key-partition-list -S apple-tool:,apple:,codesign:,productsign: -s -k "${{ secrets.APPLE_KEYCHAIN_PASSWORD }}" build.keychain

          echo "Packaging ${{ env.APPLICATION_NAME }}..."
          mkdir -p ${{ env.APPLICATION_NAME }}.app/Contents/MacOS
          mkdir -p ${{ env.APPLICATION_NAME }}.app/Contents/Resources
          cp ${{ env.APPLICATION_NAME }} ${{ env.APPLICATION_NAME }}.app/Contents/MacOS/${{ env.APPLICATION_NAME }}
          chmod +x ${{ env.APPLICATION_NAME }}.app/Contents/MacOS/${{ env.APPLICATION_NAME }}
          cp .github/assets/${{ env.APPLICATION_NAME }}.icns ${{ env.APPLICATION_NAME }}.app/Contents/Resources

          export RELEASE_TAG="${{ env.RELEASE_TAG }}"
          CLEAN_VERSION="${RELEASE_TAG#v}"

          # Create enhanced Info.plist
          cat <<EOF > ${{ env.APPLICATION_NAME }}.app/Contents/Info.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>${{ env.APPLICATION_NAME }}</string>
              <key>CFBundleIdentifier</key>
              <string>com.blinklabssoftware.${{ env.APPLICATION_NAME }}</string>
              <key>CFBundleName</key>
              <string>${{ env.APPLICATION_NAME }}</string>
              <key>CFBundleIconFile</key>
              <string>${{ env.APPLICATION_NAME }}</string>
              <key>CFBundleVersion</key>
              <string>${CLEAN_VERSION}</string>
              <key>CFBundleShortVersionString</key>
              <string>${CLEAN_VERSION}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>LSApplicationCategoryType</key>
              <string>public.app-category.utilities</string>
          </dict>
          </plist>
          EOF

          # Sign the app
          /usr/bin/codesign --force -s "Developer ID Application: Blink Labs Software (${{ secrets.APPLE_TEAM_ID }})" --options runtime ${{ env.APPLICATION_NAME }}.app -v

          # Store notarization credentials
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "${{ secrets.APPLE_ID }}" --team-id "${{ secrets.APPLE_TEAM_ID }}" --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}"

          # Notarize the app
          ditto -c -k --keepParent "${{ env.APPLICATION_NAME }}.app" "notarization.zip"
          xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait
          xcrun stapler staple "${{ env.APPLICATION_NAME }}.app"

          # Create scripts directory for pkg installer
          mkdir -p scripts

          # Create a postinstall script for the package
          cat > scripts/postinstall << EOF
          #!/bin/bash

          # Create a symlink to the CLI tool in /usr/local/bin
          mkdir -p /usr/local/bin
          ln -sf "/Applications/${{ env.APPLICATION_NAME }}.app/Contents/MacOS/${{ env.APPLICATION_NAME }}" "/usr/local/bin/${{ env.APPLICATION_NAME }}"

          # Set proper permissions
          chmod 755 "/Applications/${{ env.APPLICATION_NAME }}.app/Contents/MacOS/${{ env.APPLICATION_NAME }}"

          exit 0
          EOF

          # Make the script executable
          chmod +x scripts/postinstall

          # Create a temporary directory for package building
          mkdir -p package/Applications

          # Copy the app bundle to the package directory
          cp -R "${{ env.APPLICATION_NAME }}.app" package/Applications/

          # Create the component package
          pkgbuild --root package \
                   --install-location "/" \
                   --scripts scripts \
                   --identifier "com.blinklabssoftware.${{ env.APPLICATION_NAME }}" \
                   --version "${CLEAN_VERSION}" \
                   "${{ env.APPLICATION_NAME }}.pkg"

          # Create distribution.xml for the installer
          cat > distribution.xml << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <installer-gui-script minSpecVersion="1">
              <title>${{ env.APPLICATION_NAME }} Installer</title>
              <organization>com.blinklabssoftware</organization>
              <domains enable_localSystem="true"/>
              <options customize="never" require-scripts="true" rootVolumeOnly="true"/>
              <pkg-ref id="com.blinklabssoftware.${{ env.APPLICATION_NAME }}"/>
              <choices-outline>
                  <line choice="default">
                      <line choice="com.blinklabssoftware.${{ env.APPLICATION_NAME }}"/>
                  </line>
              </choices-outline>
              <choice id="default"/>
              <choice id="com.blinklabssoftware.${{ env.APPLICATION_NAME }}" visible="false">
                  <pkg-ref id="com.blinklabssoftware.${{ env.APPLICATION_NAME }}"/>
              </choice>
              <pkg-ref id="com.blinklabssoftware.${{ env.APPLICATION_NAME }}" version="${CLEAN_VERSION}" onConclusion="none">${{ env.APPLICATION_NAME }}.pkg</pkg-ref>
          </installer-gui-script>
          EOF

          # Build the product archive
          productbuild --distribution distribution.xml \
                       --package-path . \
                       --version "${CLEAN_VERSION}" \
                       "${{ env.APPLICATION_NAME }}-${CLEAN_VERSION}.pkg"

          # Sign the package
          productsign --sign "Developer ID Installer: Blink Labs Software (${{ secrets.APPLE_TEAM_ID }})" \
                      "${{ env.APPLICATION_NAME }}-${CLEAN_VERSION}.pkg" \
                      "${{ env.APPLICATION_NAME }}-${CLEAN_VERSION}-signed.pkg"

          # Notarize the package
          xcrun notarytool submit "${{ env.APPLICATION_NAME }}-${CLEAN_VERSION}-signed.pkg" --keychain-profile "notarytool-profile" --wait

          # Staple the notarization ticket
          xcrun stapler staple "${{ env.APPLICATION_NAME }}-${CLEAN_VERSION}-signed.pkg"

          # Create DMG with both the app and installer package
          mkdir -p dmg_contents
          cp -R "${{ env.APPLICATION_NAME }}.app" dmg_contents/
          cp "${{ env.APPLICATION_NAME }}-${CLEAN_VERSION}-signed.pkg" dmg_contents/

          # Create README.txt file
          cat > dmg_contents/README.txt << EOF
          ${{ env.APPLICATION_NAME }} ${CLEAN_VERSION}

          To install:
          1. Double-click the installer package to install
          - OR -
          2. Drag the application to your Applications folder

          After installation, you can run ${{ env.APPLICATION_NAME }} from:
          - Spotlight (Command+Space, then type "${{ env.APPLICATION_NAME }}")
          - Launchpad
          - Terminal (just type "${{ env.APPLICATION_NAME }}" from any directory)
          EOF

          # Create the DMG
          hdiutil create -volname "${{ env.APPLICATION_NAME }}-${CLEAN_VERSION}" \
                         -srcfolder dmg_contents \
                         -ov \
                         -format UDZO \
                         "${{ env.APPLICATION_NAME }}-${{ env.RELEASE_TAG }}-${{ matrix.os }}-${{ matrix.arch }}.dmg"

          # Sign the DMG
          codesign --force --sign "Developer ID Application: Blink Labs Software (${{ secrets.APPLE_TEAM_ID }})" "${{ env.APPLICATION_NAME }}-${{ env.RELEASE_TAG }}-${{ matrix.os }}-${{ matrix.arch }}.dmg"

          # Notarize the DMG
          xcrun notarytool submit "${{ env.APPLICATION_NAME }}-${{ env.RELEASE_TAG }}-${{ matrix.os }}-${{ matrix.arch }}.dmg" --keychain-profile "notarytool-profile" --wait

          # Staple the DMG
          xcrun stapler staple "${{ env.APPLICATION_NAME }}-${{ env.RELEASE_TAG }}-${{ matrix.os }}-${{ matrix.arch }}.dmg"

          # Clean up temporary files
          rm -rf notarization.zip scripts distribution.xml package dmg_contents
      - name: Upload release asset
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          _filename=${{ env.APPLICATION_NAME }}-${{ env.RELEASE_TAG }}-${{ matrix.os }}-${{ matrix.arch }}
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            _filename=${_filename}.msi
          fi
          if [[ "${{ matrix.os }}" == "windows" || "${{ matrix.os }}" == "linux" || "${{ matrix.os }}" == "freebsd" ]]; then
            cp ${{ env.APPLICATION_NAME }} ${_filename}
          fi
          if [[ "${{ matrix.os }}" == "darwin" ]]; then
            _filename=${{ env.APPLICATION_NAME }}-${{ env.RELEASE_TAG }}-${{ matrix.os }}-${{ matrix.arch }}.dmg
          fi
          if [[ "${{ matrix.os }}" == "linux" || "${{ matrix.os }}" == "freebsd" ]]; then
            for file in ${_filename} ${{ env.APPLICATION_NAME }}-${{ env.RELEASE_TAG }}-${{ matrix.os }}-${{ matrix.arch }}.sig blinklabs-io-release-signing-key.asc; do
              curl \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ needs.create-draft-release.outputs.RELEASE_ID }}/assets?name=$(basename "$file")"
            done
          fi
          if [[ "${{ matrix.os }}" == "windows" || "${{ matrix.os }}" == "darwin" ]]; then 
            curl \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @${_filename} \
              https://uploads.github.com/repos/${{ github.repository }}/releases/${{ needs.create-draft-release.outputs.RELEASE_ID }}/assets?name=${_filename}
          fi

      - name: Attest binary
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: '${{ env.APPLICATION_NAME }}'

  finalize-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [create-draft-release, build-binaries]
    steps:
      - uses: actions/github-script@v7
        if: startsWith(github.ref, 'refs/tags/')
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: ${{ needs.create-draft-release.outputs.RELEASE_ID }},
                draft: false,
              });
            } catch (error) {
              core.setFailed(error.message);
            }
      # This updates the documentation on pkg.go.dev and the latest version available via the Go module proxy
      - name: Pull new module version
        if: startsWith(github.ref, 'refs/tags/')
        uses: andrewslotin/go-proxy-pull-action@v1.2.0
